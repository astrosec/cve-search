from flask_restx import Resource, Namespace, fields

from lib.Query import searchByProductAndVersion, searchProducts
from web.restapi.cpe_convert import message

api = Namespace(
    'search-product',
    description='Endpoints to search products by string parts.',
    path='/',
)

search_by_product_and_version_model = api.model(
    "browseProductVersions",
    {
        "product": fields.String(description="Product name", example=".net_core"),
        "version": fields.List(
            fields.String,
            description="List with versions belonging to the given product that match the given part string",
            example=[
                "*:*:*:*:*:*:*:*",
                "1.0:*:*:*:*:*:*:*",
                "1.1:*:*:*:*:*:*:*",
                "2.0:*:*:*:*:*:*:*",
                "....",
            ],
        ),
        "summaries": fields.List(fields.String, description="placeholder", example="placeholder"),
    },
)

@api.route('/search-product/<product>/<version_part>')
@api.response(400, "Error processing request", model=message)
@api.response(500, "Server error", model=message)
class SearchByProductAndVersion(Resource):
    @api.marshal_with(search_by_product_and_version_model)
    def get(self, product, version_part):
        """
        Search products with version

        Searches the database by product and version.
        """
        return searchByProductAndVersion(product, version_part)
    
search_product_model = api.model(
    "browseList",
    {
        "product": fields.List(
            fields.String,
            description="List with product names matching the given part",
            example=[".bbsoftware", ".joomclan", ".matteoiammarrone", "....."],
        )
    },
)

@api.route("/search-product/<product_part>")
@api.response(400, "Error processing request", model=message)
@api.response(500, "Server error", model=message)
class SearchProducts(Resource):
    @api.marshal_with(search_product_model)
    def get(self, product_part):
        """
        Search products 

        Returns a list of products that match the given part-string.
        """
        return searchProducts(product_part)